---
title: EDA para Projeto de Iniciação Científica
description: Desenvolvimento de medidas para caracterização de mudanças em séries temporais de imagens SAR com apoio de Aprendizado de Máquina
author: João Pedro Melani Saraiva
---

```{python}
import ee
import geemap
from pkg import pkg
from pkg import save
import pandas as pd
import numpy as np
import seaborn as sbn
import matplotlib.pyplot as plt
```


```{python}
try:
    ee.Initialize()
except:
    ee.Authenticate()
    ee.Initialize()

coordenadas = "-48.534679,-22.508117,-48.50481,-22.538879"
x1, y1, x2, y2 = coordenadas.split(",")

datas = "2020-01-01,2020-12-31"
inicio, fim = datas.split(",")
escala = 30
dummy_value = 99999

geom = ee.Geometry.Polygon([[[float(x1),float(y2)],
                             [float(x2),float(y2)],
                             [float(x2),float(y1)],
                             [float(x1),float(y1)],
                             [float(x1),float(y2)]]])


sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')\
    .filterBounds(geom)\
    .filterDate(inicio,fim)\
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))\
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    
v_emit_asc = sentinel1.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
v_emit_desc = sentinel1.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))

image = ee.Image(dummy_value).blend(v_emit_desc.map(pkg.add_amplitude).select('amplitude').toBands())
image_names = image.bandNames().getInfo()

df = pkg.ee_to_pandas(image, geom, image_names, scale=10)
```

```{python}
latitude_central = (float(x1)+float(x2))/2
longitude_central = (float(y1)+float(y2))/2

my_map = geemap.Map(center=(longitude_central, latitude_central), zoom=13)
my_map.addLayer(geom)

rgb = ee.Image.rgb(
    v_emit_desc.mean().select('VV'),
    v_emit_desc.mean().select('VH'),
    v_emit_desc.mean().select('VV').divide(v_emit_desc.mean().select('VH'))
).clip(geom)

my_map.addLayer(rgb, {'min': [-25,-25,0], 'max': [0,0,2]})

my_map
```

```{python}
renamed = pkg.rename_geodf(df)
reordered = renamed.reindex(sorted(renamed.columns), axis=1) 
```


```{python}
def scale_all(df):
    names = df.columns
    mat = df.to_numpy()
    scaled_mat = (mat - np.mean(mat)) / np.std(mat)
    return pd.DataFrame(scaled_mat, columns=names)

coords = reordered.loc[:, ['latitude','longitude']]

scaled = scale_all(reordered.drop(['latitude','longitude'], axis=1)).join(coords)
```


```{python}
col_names = scaled.drop(['latitude','longitude'], axis=1).columns

save.save_tiff_from_df(scaled, col_names, dummy_value, r"assets/scaled.tif", "EPSG:4326")
```

```{python}
for i in range(1,32):
    print(i)
    pkg.show_tif(r"assets/scaled.tif", i)
    plt.show()
```

```{python}
test = scaled\
    .drop(['latitude','longitude'], axis=1)\
    .iloc[779,:]\
    .values

test_specenv = pkg.optimize(test, np.abs, np.square).values

sbn.lineplot(
    pd.DataFrame(
        {'original': test, 'opt': test_specenv}
    )
)
```

```{python}
def call_func(x):
    try:
        res = pkg.optimize(x, np.abs, np.square)
    except:
        res = pd.Series(len(x)*[-1])
    return res

optimized = scaled\
    .drop(['latitude','longitude'], axis=1)\
    .apply(call_func, axis=1)\
    .join(coords)
```


```{python}
col_names = optimized.drop(['latitude','longitude'], axis=1).columns

save.save_tiff_from_df(optimized, col_names, dummy_value, r"assets/optimized.tif", "EPSG:4326")
```


```{python}
pkg.show_tif("assets/optimized.tif", 1)
```